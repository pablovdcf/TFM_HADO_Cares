# Principal file for the Streamlit Aplication

import streamlit as st
from streamlit_pandas_profiling import st_profile_report
import base64
import pandas as pd

import ydata_profiling
from streamlit_pandas_profiling import st_profile_report
from ydata_profiling import ProfileReport


from data_processing import sidebar_and_upload,\
                            apply_filters, \
                            crud_operations,\
                            generate_pandas_profiling,\
                            load_gdf
from visualization import plot_classification_heatmap,\
                            plot_selected_category, \
                            plot_heatmap, \
                            plot_time_trends, \
                            plot_total_patients
from interactive_maps import folium_static,\
                            generate_interactive_maps,\
                            plot_patients_by_ayuntamiento,\
                            plot_average_metrics_by_ayuntamiento,\
                            plot_top_ayuntamientos_for_category
                            
from utils import machine_learning



st.set_page_config(page_title="HADO",
                   layout='wide', 
                   initial_sidebar_state = 'auto',
                    page_icon="üè•")

if 'show_filters' not in st.session_state:
    st.session_state.show_filters = True
    

# Main Function
def main():
    
    st.write("# HADO CARES")
    tab1, tab2, tab3, tab4, tab5, tab6, tab7 = st.tabs([
        "Home üè†", "Filtros üîç", "Visualizaciones üìä", "Mapa üó∫Ô∏è", "CRUD Operations ‚úçÔ∏è", "ML üñ•Ô∏è", "Pandas Profiling üìÉ"
    ])
    try:
        df = None
        df = sidebar_and_upload()
        
    except Exception as e:
        st.sidebar.info("Por favor suba el archivo CSV para inicialzar la aplicaci√≥n")
        # st.sidebar.write(f"Ocurri√≥ un error: {e}")
        
    if df is not None:
        with tab1:
            st.write("## Datos de muestra")
            st.write(df.head(10))
            st.write(f"El dataset tiene {df.shape[0]} filas y {df.shape[1]} columnas.")
        
        # Apply Filters
        with tab2:
            st.header("Filtrado y Descarga de Datos")
            # Uso de columnas para organizar el contenido
            col1, col2, col3 = st.columns([1, 0.05, 1])
            with col1.expander("Instrucciones para el uso de filtros üõ†Ô∏è"):
                st.markdown(
    """
    ### **Instrucciones para el uso de filtros:** üõ†Ô∏è
    
    **1. Filtros por Categor√≠a:** üè∑Ô∏è
       - **Selecciona** las categor√≠as que deseas incluir en cada filtro desplegable.
       - Puedes seleccionar **m√∫ltiples categor√≠as** a la vez. Por ejemplo:
         Puedes filtrar por las categor√≠as de **diagn√≥stico** y **m√©dico** entre muchos otros.
    
    **2. A√±o:** üìÖ
       - **Selecciona** el o los a√±os para los cuales deseas visualizar los datos.
       - Esto te permitir√° visualizar datos espec√≠ficos para cada a√±o seleccionado.
    
    **3. Estado de Pacientes:** ü©∫
       - **Filtra** los datos seg√∫n el estado de los pacientes.
       - √ötil para analizar datos seg√∫n diferentes estados de salud.
    
    **4. Filtros de Visitas y Estancias:** üè•
       - **Ajusta los rangos** para el n√∫mero de visitas y estancias que desees filtrar.
       - Esto te permitir√° enfocarte en datos que cumplen con ciertos criterios.
    
    **5. Ayuntamiento:** üèõÔ∏è
       - **Selecciona** el o los ayuntamientos que deseas filtrar.
       - Puedes seleccionar uno o varios ayuntamientos para analizar.
    
    **6. Reset Filters:** ‚ôªÔ∏è
       - Si deseas revertir los filtros aplicados, haz clic en este bot√≥n.
       - Esto te llevar√° de nuevo al conjunto de datos original.
    
    **7. Descarga:** üíæ
       - Una vez aplicados los filtros, haz clic en 'Descargar CSV' para obtener tus datos.
       - Recibir√°s un archivo CSV con los datos filtrados.
    """
    )       
            # Filtros y acciones en la segunda columna
            with col3:
                st.write("### Filtros ‚¨áÔ∏è")     
                if st.session_state.show_filters:
                    df_filtered = apply_filters(df)

                if st.button("Reset Filters"):
                    
                    # Hides filters and shows the original DataFrame
                    st.session_state.show_filters = False
                    df_filtered = df.copy()

                # Show filters again (this will reset them)
                st.session_state.show_filters = True
            
            with col1:
                st.write("## Datos filtrados")
                
                st.write(f"El dataset tiene {df_filtered.shape[0]} filas y {df_filtered.shape[1]} columnas.")
                
                st.write(df_filtered)
            
            st.write("## Download DataFrame")
            download_button = st.button("Download CSV")
            if download_button:
                csv = df_filtered.to_csv(index=False)
                b64 = base64.b64encode(csv.encode()).decode()
                href = f'<a href="data:file/csv;base64,{b64}" download="modified_dataframe.csv">Download CSV File</a>'
                st.markdown(href, unsafe_allow_html=True)
                
        
        # Data Visualizations
        with tab3:
            with st.expander("Informaci√≥n para el uso de Visualizaciones"):
                st.markdown(
    """
    # **Visualizaciones de Datos** üìä
    
    En esta secci√≥n, puedes explorar diversas visualizaciones que te ayudar√°n a entender mejor tus datos.
    
    ## **1. Selecci√≥n de A√±o:** üìÖ
    - **Opci√≥n para Todos los A√±os:** Visualiza los datos acumulativos de todos los a√±os disponibles.
    - **Opci√≥n de A√±o Espec√≠fico:** Filtra y visualiza los datos para un a√±o seleccionado.
    
    ## **2. Selecci√≥n de Columna:** üéõÔ∏è
    - **Selecciona una Columna:** Escoge una columna del conjunto de datos para la visualizaci√≥n.
    - Las columnas disponibles incluyen categor√≠as, m√©dico y clasificaciones.
    
    ## **3. Relaci√≥n con Otra Variable:** üîó
    - **Explora Relaciones:** Selecciona las columnas para explorar su relaci√≥n y sus valores √∫nicos.
    - Se muestra un heatmap para visualizar la relaci√≥n entre las dos variables seleccionadas.
    
    ## **4. Visualizaciones Detalladas:** üîç
    - **Barthel, PS ECOG, GDS FAST:** Explora visualizaciones detalladas para cada uno de estos √≠ndices.
    - **Mostrar/Ocultar Gr√°ficos:** Utiliza los botones para visualizar u ocultar gr√°ficos detallados.
    - Cada √≠ndice tiene una descripci√≥n detallada y caracter√≠sticas principales para poder interpretar los resultados.
    
    ## **5. Informaci√≥n Adicional:** ‚ÑπÔ∏è
    - Las visualizaciones se generan din√°micamente en base a tus selecciones.
    - Utiliza los desplegables y botones para personalizar las visualizaciones seg√∫n tus necesidades.
    - Explora las diferentes opciones y visualizaciones para obtener insights valiosos de tus datos.
    """
)           
            st.divider()
            # Option to select to display by year or by all years
            col1, col2 = st.columns([1,1])
            with col1:
                year_option = st.selectbox("### ¬øQuieres visualizar por un a√±o espec√≠fico o por todos los a√±os?", ["Todos los a√±os", "A√±o espec√≠fico"])
            
                # If the user selects "Specific year", we display an additional selector for the user to choose the year
                if year_option == "A√±o espec√≠fico":
                    selected_year = st.selectbox("### Seleccione un a√±o:", sorted(df['year'].unique()))
                    df = df[df['year'] == selected_year]  # Filter the DataFrame by the selected year
                
            filtered_columns = [col for col in df.columns if 'category' in col or 'medico' in col or 'classification' in col]
            with col2:
                selected_column = st.selectbox("### Seleccione una columna para visualizar:", filtered_columns)
            
            col1, col2 = st.columns(2)
            with col1:
                if year_option != "A√±o espec√≠fico":
                    plot_total_patients(df)
                    st.divider()
                    if selected_column:
                        plot_selected_category(df, selected_column)
                else:
                    if selected_column:
                        plot_selected_category(df, selected_column)
                
            with col2:
                if year_option != "A√±o espec√≠fico":
                    if selected_column:
                        plot_time_trends(df, selected_column)
                        st.divider()
            st.divider()
            
            with st.expander('### Relaci√≥n con Otra Variable'):
                st.info("Seleccione otra columna para explorar la relaci√≥n con la columna previamente seleccionada.")
                col1, col2 = st.columns([1,1])
                with col1:
                    selected_column1 = st.selectbox("#### Seleccione una columna:", filtered_columns)
                    selected_column2 = st.selectbox("#### Seleccione Otra Columna para observar la relaci√≥n entre ambas:", filtered_columns)

                if selected_column1 == selected_column2:
                    st.warning("üßê No pueden ser las mismas columnas. Por favor, escoja otra columna.")
                else:
                    st.write("### Heatmap de Relaci√≥n")

                    # Obt√©n los valores √∫nicos de las columnas seleccionadas
                    unique_values_col1 = df[selected_column1].unique()
                    unique_values_col2 = df[selected_column2].unique()
                    
                    with col2:
                        # SelectBoxes para seleccionar valores √∫nicos
                        selected_value_col1 = st.multiselect(f"#### Seleccione un valor √∫nico para {selected_column1}:", unique_values_col1)
                        selected_value_col2 = st.multiselect(f"#### Seleccione un valor √∫nico para {selected_column2}:", unique_values_col2)

                    # Filtra el DataFrame basado en los valores seleccionados
                    filtered_df = df[(df[selected_column1].isin(selected_value_col1)) & (df[selected_column2].isin(selected_value_col2))]
                    
                    # Verifica si el DataFrame filtrado est√° vac√≠o
                    if filtered_df.empty:
                        st.warning("Por favor, seleccione al menos un valor de cada columna para visualizar el heatmap.")

                    col1, col2, col3 = st.columns([0.5,2,0.5])
                    with col2:
                        plot_heatmap(filtered_df, selected_column1, selected_column2)
            
            # Create or retrieve status variables for each chart
            if 'show_barthel' not in st.session_state:
                st.session_state.show_barthel = False
            if 'show_ps_ecog' not in st.session_state:
                st.session_state.show_ps_ecog = False
            if 'show_gds_fast' not in st.session_state:
                st.session_state.show_gds_fast = False

            container = st.container()
            col1, col2, col3 = container.columns([0.5, 2, 0.5])
            with col2:
                # Barthel
                barthel_expander = st.expander("### Barthel")
                with barthel_expander:
                    st.markdown("""
                                ### √çndice de Barthel

El √≠ndice de Barthel eval√∫a la independencia de una persona para realizar actividades b√°sicas de la vida diaria, asignando un puntaje entre 0 (dependencia total) y 100 (independencia total). Seg√∫n el puntaje, se clasifica la dependencia como:

- **< 20 puntos:** Total
- **20 - 40 puntos:** Severa
- **40 - 60 puntos:** Moderada
- **60 - 90 puntos:** Leve o m√≠nima
- **90 - 100 puntos:** Independencia

Esta herramienta es √∫til para valorar la funcionalidad, evoluci√≥n, pron√≥stico del paciente y planificar su atenci√≥n, permitiendo comparar el estado funcional entre pacientes.

""")
                    if st.button("Mostrar/Ocultar Gr√°fico Barthel"):
                        st.session_state.show_barthel = not st.session_state.show_barthel
                    if st.session_state.show_barthel:
                        plot_classification_heatmap(df, 'barthel_classification', 'barthel')
                
                # PS_ECOG
                ps_ecog_expander = st.expander("### PS_ECOG")
                with ps_ecog_expander:
                    st.markdown("""
                                ### Escala PS ECOG

La escala PS ECOG mide la calidad de vida y capacidad de un paciente oncol√≥gico para realizar actividades diarias, clasific√°ndolo en:

- **ECOG 0:** Asintom√°tico, capaz de realizar trabajo y actividades normales.
- **ECOG 1:** S√≠ntomas leves, limitado para trabajos arduos.
- **ECOG 2:** Incapaz de trabajar, en cama menos del 50% del d√≠a.
- **ECOG 3:** En cama m√°s de la mitad del d√≠a, necesita ayuda para muchas actividades.
- **ECOG 4:** Encamado el 100% del d√≠a, necesita ayuda para todas las actividades.
- **ECOG 5:** Fallecido.

Dise√±ada por el Eastern Cooperative Oncology Group (ECOG) y validada por la OMS, esta escala objetiva la calidad de vida del paciente, influenciando el protocolo terap√©utico y el pron√≥stico de la enfermedad. Es fundamental para valorar la evoluci√≥n y autonom√≠a del paciente oncol√≥gico.


""")
                    if st.button("Mostrar/Ocultar Gr√°fico PS_ECOG"):
                        st.session_state.show_ps_ecog = not st.session_state.show_ps_ecog
                    if st.session_state.show_ps_ecog:
                        plot_classification_heatmap(df, 'ps_ecog_classification', 'ps_ecog')
                
                # GDS_FAST
                gds_fast_expander = st.expander("### GDS_FAST")
                with gds_fast_expander:
                    st.markdown("""
                                ### Escala GDS-FAST
                                
La escala GDS-FAST mide el grado de deterioro cognitivo y funcional en personas con demencia, especialmente Alzheimer, clasific√°ndolos en 7 estadios (GDS 1-7) que van desde la normalidad hasta el deterioro severo. Cada estadio tiene caracter√≠sticas y subfases espec√≠ficas, evaluadas por la Escala de Evaluaci√≥n Funcional (FAST). La tabla abajo resume los estadios y caracter√≠sticas principales:

| Estadio | Descripci√≥n | Caracter√≠sticas Principales |
| ------- | ----------- | --------------------------- |
| GDS 1   | Normal | Sin d√©ficit cognitivo o funcional |
| GDS 2   | D√©ficit Cognitivo Muy Leve | Olvidos menores, sin impacto en actividades diarias |
| GDS 3   | D√©ficit Cognitivo Leve | Primeros defectos claros, afecta tareas complejas |
| GDS 4   | D√©ficit Cognitivo Moderado | Afecta tareas econ√≥micas y de planificaci√≥n |
| GDS 5   | D√©ficit Cognitivo Moderadamente Grave | Necesita asistencia en elecci√≥n de ropa, desorientaci√≥n temporal |
| GDS 6   | D√©ficit Cognitivo Grave | Necesita asistencia total, incontinencia |
| GDS 7   | D√©ficit Cognitivo Muy Grave | P√©rdida de habilidades b√°sicas, incapacidad para hablar o caminar |

Esta escala es fundamental para evaluar la evoluci√≥n, pron√≥stico y decidir el tratamiento y cuidados adecuados para pacientes con demencia.

""")
                    if st.button("Mostrar/Ocultar Gr√°fico GDS_FAST"):
                        st.session_state.show_gds_fast = not st.session_state.show_gds_fast
                    if st.session_state.show_gds_fast:
                        plot_classification_heatmap(df, 'gds_fast_classification', 'gds_fast')

        # Mapa
        with tab4:
            try:
                gdf = None
                gdf = load_gdf()
                
            except Exception as e:
                st.info("Por favor suba el archivo GeoJson para observar el mapa con los municipios")
                # st.error(f"Ocurri√≥ un error: {e}")
            md_expander = st.expander("‚ûï Informaci√≥n")
            with md_expander:
                st.markdown("""
                           ### Gu√≠a de Uso de las Visualizaciones üåü

¬°Bienvenido a la secci√≥n de visualizaciones! Aqu√≠ podr√°s explorar diferentes aspectos de los datos a trav√©s de gr√°ficos interactivos y mapas. A continuaci√≥n, te presentamos una gu√≠a detallada para ayudarte a navegar y aprovechar al m√°ximo esta secci√≥n.

#### 1. Subida del Archivo GeoJson üì§

Antes de empezar a explorar el mapa interactivo, es necesario subir el archivo GeoJson que contiene la informaci√≥n geogr√°fica de los municipios. Encontrar√°s una opci√≥n para cargar este archivo en la parte superior de la secci√≥n. Una vez cargado correctamente, podr√°s visualizar el mapa y explorar los datos geogr√°ficos.

üí° **Consejo:** Si no se carga el archivo GeoJson o si ocurre alg√∫n error durante la carga, se mostrar√° una advertencia, y no podr√°s visualizar el mapa.

---
#### 2. Mapa Interactivo üó∫Ô∏è

En esta secci√≥n, encontrar√°s un mapa interactivo que muestra informaci√≥n geogr√°fica relevante. Para personalizar tu experiencia y visualizar los datos que te interesan, puedes utilizar los siguientes filtros:

- **Seleccione un A√±o:** Este filtro te permite visualizar los datos correspondientes a un a√±o espec√≠fico. La selecci√≥n de un a√±o afectar√° todas las visualizaciones de la p√°gina.
- **Seleccione la Columna para Visualizar:** Aqu√≠, puedes elegir la m√©trica que deseas visualizar en el mapa. Las opciones disponibles son: 'barthel', 'gds_fast', 'ps_ecog', 'n_visitas', y 'n_estancias'.

**Visualizaciones Adicionales:**
Adem√°s del mapa, encontrar√°s las siguientes visualizaciones que proporcionan insights adicionales:
- **N√∫mero de Pacientes por Ayuntamiento:** Este gr√°fico de barras te muestra la cantidad de pacientes por cada ayuntamiento para el a√±o seleccionado.
- **Promedios de M√©tricas Clave por Ayuntamiento:** Aqu√≠ podr√°s ver varios gr√°ficos de barras que representan los promedios de diferentes m√©tricas clave por ayuntamiento.

---
#### 3. Top de Ayuntamientos por Columnas üìä

En la parte inferior de la p√°gina, podr√°s explorar los ayuntamientos que destacan en diferentes categor√≠as. Utiliza los filtros disponibles para personalizar la visualizaci√≥n:

- **Seleccione una Categor√≠a:** Permite elegir una categor√≠a (columna) del conjunto de datos para analizar.
- **Seleccione Valores de Categor√≠a:** Despu√©s de seleccionar una categor√≠a, podr√°s filtrar por valores espec√≠ficos dentro de ella.
- **Seleccione Ayuntamientos:** Este filtro te da la opci√≥n de seleccionar uno o varios ayuntamientos para incluir en la visualizaci√≥n.
- **Seleccione un Tipo de Gr√°fico:** Aqu√≠, puedes decidir el formato en el que deseas visualizar los datos, pudiendo elegir entre 'Gr√°fico de barras' y 'Gr√°fico de puntos'.

üí° **Consejo:** Solo podr√°s seleccionar categor√≠as que tengan 15 o menos valores √∫nicos.
                            """)
            container = st.container()
            col1, col2, col3 = container.columns([0.5, 2, 0.5])
            if gdf is not None:
                with col1:
                    st.write("### Filtros para el mapa")
                    st.info("La selecci√≥n del a√±o afecta a todas las visualizaciones de esta p√°gina")
                        
                    selected_year = st.selectbox("Seleccione un a√±o:", sorted(df['year'].unique()))
                        
                    column = st.selectbox("Seleccione la columna para visualizar:", ['barthel', 'gds_fast', 'ps_ecog', 'n_visitas', 'n_estancias'])
                
                with col2: 
                    map_object = generate_interactive_maps(df, column, gdf, selected_year)

                    if isinstance(map_object, str):
                        st.error(map_object)
                    else:
                        folium_static(map_object)
                        
            else:
                st.warning("No se pudo cargar el archivo GeoJson o el archivo no existe.")
            
            st.write("")
            with col2: 
                df_filtered = df[df['year'] == selected_year]
                plot_patients_by_ayuntamiento(df_filtered, selected_year)

                st.divider()
                plot_average_metrics_by_ayuntamiento(df, selected_year)
                st.info("No se tienen en cuenta ayuntamientos desconocidos para el calculo de los promedios")

                st.divider()
                
                
                st.markdown("""
                            ## Top de Ayuntamientos por columnas
                            """)
                selected_plot_type = st.selectbox("Seleccione un tipo de gr√°fico:", ['Gr√°fico de barras', 'Gr√°fico de puntos'])
                container = st.container()
                col1, col2 = container.columns([1, 1])
                # Columna 1
                with col1:
                    # Lista de columnas categ√≥ricas con 15 o menos valores √∫nicos
                    categorical_columns = [col for col in df.select_dtypes(include='object').columns if df[col].nunique() <= 15]
                    
                    # Crear un selector para estas columnas
                    selected_category = st.selectbox("Seleccione una categor√≠a:", categorical_columns)
                    
                    # Obtener los valores √∫nicos de la columna de categor√≠a seleccionada y crear un selector para estos valores
                    unique_category_values = sorted(df[selected_category].unique().tolist())
                    selected_category_values = st.multiselect(f"Seleccione valores de {selected_category}:", unique_category_values, default=unique_category_values)

                # Columna 2
                with col2:
                    # Obtener la lista de ayuntamientos √∫nicos y crear un selector para estos ayuntamientos
                    unique_ayuntamientos = sorted(df['ayuntamiento'].unique().tolist())
                    selected_ayuntamientos = st.multiselect("Seleccione ayuntamientos:", unique_ayuntamientos, default=unique_ayuntamientos)
                    

                plot_top_ayuntamientos_for_category(df, selected_year,selected_ayuntamientos, selected_category, selected_category_values, selected_plot_type)
                
                
                
        # CRUD Operations
        with tab5:
            crud_operations(df)
        
        # Machine Learning
        with tab6:
            
            machine_learning(df)
        
        # Pandas Profiling
        with tab7:
            st.header("**Pandas Profiling Report**")
            pandas_pr_expander = st.expander("### ‚ûï Informaci√≥n")
            with pandas_pr_expander:
                st.markdown("""
                        ### üìò Acerca de la Aplicaci√≥n

Esta aplicaci√≥n te permite explorar y analizar conjuntos de datos. Utiliza Pandas Profiling para generar informes detallados que te proporcionan una visi√≥n general de la distribuci√≥n, limpieza y estructura de tus datos.

### üöÄ C√≥mo Utilizar

1. **Cargar Datos:** Utiliza la opci√≥n de carga de archivos para subir tu conjunto de datos en formato CSV.
2. **Generar Informe:** Haz clic en el bot√≥n 'Generar Pandas Profiling Report' para crear un informe detallado de tu conjunto de datos.
3. **Explorar Informe:** Navega a trav√©s del informe generado para obtener insights valiosos y estad√≠sticas detalladas sobre cada columna de tu conjunto de datos.

---
### üîç Sobre Pandas Profiling

Pandas Profiling es una herramienta de exploraci√≥n de datos que genera informes de perfiles a partir de un DataFrame pandas. El informe resultante act√∫a como una descripci√≥n general de alta calidad del conjunto de datos y ofrece lo siguiente:

- **Descripci√≥n General:** Resumen de las filas, columnas, valores perdidos, tipos de datos y memoria usada.
- **Estad√≠sticas de Variables:** Distribuci√≥n de valores, estad√≠sticas descriptivas, correlaciones, y valores distintos.
- **Valores Faltantes:** An√°lisis de los valores nulos o faltantes en el conjunto de datos.
- **Correlaciones:** Matrices de correlaci√≥n entre variables num√©ricas.
- **Valores Extremos:** Identificaci√≥n de posibles outliers en el conjunto de datos.

Esta herramienta es √∫til tanto para la exploraci√≥n inicial de datos como para la limpieza y preprocesamiento de datos antes de la modelizaci√≥n.

---
### üí° Tips

- Utiliza Pandas Profiling para identificar problemas en tu conjunto de datos r√°pidamente.
- Explora las correlaciones entre variables para obtener insights sobre relaciones.
- Revisa los valores faltantes y considera estrategias de imputaci√≥n.

---
    """)        
            container = st.container()
            col1, col2, col3 = container.columns([0.5, 2, 0.5])
            with col1:
                st.info("Sube un archivo al sidebar que quieras explorar, dale al bot√≥n üëá y espera a que se haga la magia ü™Ñ")
                if st.button('Generar Pandas Profiling Report'):
                    report = generate_pandas_profiling(df)
                    with col2:
                        st_profile_report(report)

if __name__ == "__main__":
    main()